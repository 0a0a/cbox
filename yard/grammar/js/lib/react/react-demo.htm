<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>react-demo</title>
    <script src="./lib/react.js"></script>
    <script src="./lib/react-dom.js"></script>
    <script src="./lib/browser.min.js"></script>
  </head>
  <body>
    <div id="demo1">demo1</div>
    <hr>
    <div id="demo2"></div>
    <div id="demo3"></div>
    <hr>
    <div id="demo4">this is the demo4</div>
    <hr>
    <div id="demo5">this is the demo5</div>
    <hr>
    <div id="demo6">Das ist demo6</div>
    <hr>
    <div id="demo7">Das ist demo7</div>
    <hr>
    <div id="demo8">Das ist Demo8</div>
    <hr>
    <div id="demo9">Das ist demo9</div>
    <hr>
    <div id="demo10">Das ist demo10</div>
    <hr>
    <div id="demo11">Das ist demo11</div>
    <hr>
    <div id="demo12">Das ist demo12</div>
    <hr>
    <div id="demo13">Das ist demo13</div>
    <hr>

    <!-- demo1 -->
    <script type="text/babel">
      ReactDOM.render(
        <h1>Hello Awesome React! #demo1 </h1>,
        document.getElementById("demo1")
      );
    </script>

    <!-- demo2, demo3 -->
    <script type="text/babel">
      var names = ['Alice', 'Emily', 'Kate'];
      ReactDOM.render(
        <div>
        <h2> #demo2 </h2>
        {
          names.map((name, index) => {
            return <div key={index}>Hello, {name}!</div>
          })
        }
        </div>,
        document.getElementById("demo2")
      );

      var arr = [
        <h1 key="1">Hello world! #demo3</h1>,
        <h2 key="2">React is awesome</h2>,
      ];
      ReactDOM.render(
        <div>{arr}</div>,
        document.getElementById('demo3')
      );
    </script>

    <!-- demo4 -->
    <script type="text/babel">
      var HelloMessage = React.createClass({
        render: function() {
          return <h1>Hello {this.props.name} #demo4</h1>;
        }
      });
      ReactDOM.render(
        <HelloMessage name="Boxu" />, document.getElementById("demo4")
      );
    </script>

    <!-- demo5 -->
    <script type="text/babel">
      var NodesList = React.createClass({
        render: function() {
          return (
            <div>
            <h1>#demo5</h1>
            <ol>
              {
                React.Children.map(this.props.children, (child) => {
                  return <li>{child}</li>;
                })
              }
            </ol>
            </div>
          );
        }
      });
      ReactDOM.render(
        <NodesList>
          <span>hello</span>
          <span>world</span>
        </NodesList>,
        document.getElementById("demo5")
      );
    </script>

    <!-- demo6 -->
    <script type="text/babel">
      var data = "ABC";
      var MyTitle = React.createClass({
        propTypes: {
          title: React.PropTypes.string.isRequired,
        },
        render: function() {
          return <h1> #demo6 {this.props.title} </h1>;
        }
      });
      ReactDOM.render(
        <MyTitle title={data} />, document.getElementById("demo6")
      );
    </script>

    <!-- demo7 -->
    <script type="text/babel">
      var Comp7 = React.createClass({
        handleClick: function() {
          this.refs.myTextInput.focus();
        },
        render: function() {
          return (
            <div>
              <input type="text" ref="myTextInput" placeholder="auto focus" />
              <input type="button" value="Focus the text input-#demo7" onClick={this.handleClick} />
            </div>
          );
        }
      });
      ReactDOM.render(
        <Comp7 />, document.getElementById("demo7")
      );
    </script>

    <!-- demo8 -->
    <script type="text/babel">
      var LikeButton = React.createClass({
        getInitialState: function() {
          return { liked: false };
        },
        handleClick: function(event) {
          this.setState({ liked: !this.state.liked });
        },
        render: function() {
          var text = this.state.liked? "like": "have not liked";
          return (
            <h1 onClick={this.handleClick}>
              You {text} this. Click to toggle. #demo8
            </h1>
          );
        }
      });
      ReactDOM.render(<LikeButton />, document.getElementById("demo8"));
    </script>

    <!-- demo9 -->
    <script type="text/babel">
      var MyInput = React.createClass({
        getInitialState: function() {
          return { value: "Hello" };
        },
        onChange: function(event) {
          this.setState({value: event.target.value});
        },
        render: function() {
          var value = this.state.value;
          return (
            <div>
              <h1>#demo9</h1>
              <input type="text" value={value} onChange={this.onChange} />
              <p>{value}</p>
            </div>
          );
        }
      });
      ReactDOM.render(<MyInput />, document.getElementById("demo9"));
    </script>

    <!-- demo10 组件的生命周期 -->
    <script type="text/babel">
      var CompLife = React.createClass({
        getInitialState: function() {
          return { opacity: 1.0 };
        },
        componentDidMount: function() {
          this.timer = setInterval(function(){
            var opacity = this.state.opacity;
            opacity -= 0.05;
            if (opacity < 0.1) {
              opacity = 1.0;
            }
            this.setState( { opacity: opacity } );
          }.bind(this), 100);
        },
        render: function() {
          return (
            <h1 style={{opacity: this.state.opacity}}>
              Hello {this.props.name} #demo10
            </h1>
          );
        }
      });
      ReactDOM.render(<CompLife name="World"/>, document.getElementById("demo10"));
    </script>
  </body>
</html>
